package scorch.nn.cnn

import botkop.{numsca => ns}
import org.nd4j.linalg.api.buffer.DataBuffer
import org.nd4j.linalg.factory.Nd4j
import org.scalatest.{FlatSpec, Matchers}
import scorch.autograd.Variable
import scorch.TestUtil.oneOpGradientCheck

class MaxPoolingSpec extends FlatSpec with Matchers {

  Nd4j.setDataType(DataBuffer.Type.DOUBLE)
  ns.rand.setSeed(231)

  "NaiveMaxPoolingFunction" should "pass forward" in {
    val xShape = List(2, 3, 4, 4)
    val x = Variable(ns.linspace(-0.3, 0.4, xShape.product).reshape(xShape: _*))
    val poolWidth = 2
    val poolHeight = 2
    val stride = 2

    val out = MaxPooling
      .NaiveMaxPoolingFunction(x, poolHeight, poolWidth, stride)
      .forward()

    val correctOut = ns
      .array(-0.26315789, -0.24842105, -0.20421053, -0.18947368, -0.14526316,
        -0.13052632, -0.08631579, -0.07157895, -0.02736842, -0.01263158,
        0.03157895, 0.04631579, 0.09052632, 0.10526316, 0.14947368, 0.16421053,
        0.20842105, 0.22315789, 0.26736842, 0.28210526, 0.32631579, 0.34105263,
        0.38526316, 0.4)
      .reshape(2, 3, 2, 2)

    val error = scorch.TestUtil.relError(out.data, correctOut)
    error should be < 5e-8
  }

  it should "pass backward" in {

    val x = Variable(ns.randn(3, 2, 8, 8))
    val poolWidth = 2
    val poolHeight = 2
    val stride = 2

    def fx(a: Variable): Variable =
      MaxPooling
        .NaiveMaxPoolingFunction(a, poolHeight, poolWidth, stride)
        .forward()

    oneOpGradientCheck(fx, x)

  }

/*
[[[[0.00,  0.08,  0.00,  0.00,  0.00,  0.00,  0.00,  0.81],
   [0.00,  0.00,  0.13,  0.00,  -1.73,  0.00,  0.00,  0.00],
   [0.28,  0.00,  -0.46,  0.00,  0.71,  0.00,  0.00,  0.00],
   [0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  2.05],
   [0.00,  0.00,  0.00,  0.00,  0.08,  0.00,  -0.67,  0.00],
   [-0.20,  0.00,  -2.17,  0.00,  0.00,  0.00,  0.00,  0.00],
   [0.00,  -0.01,  0.00,  0.00,  0.00,  0.00,  0.00,  0.14],
   [0.00,  0.00,  0.00,  -0.57,  2.02,  0.00,  0.00,  0.00]],

  [[-3.68,  0.00,  0.00,  0.00,  0.00,  0.00,  1.06,  0.00],
   [0.00,  0.00,  0.00,  -0.23,  0.00,  1.89,  0.00,  0.00],
   [0.00,  0.00,  -0.93,  0.00,  0.00,  0.00,  0.00,  0.00],
   [-0.21,  0.00,  0.00,  0.00,  -1.47,  0.00,  0.77,  0.00],
   [1.02,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00],
   [0.00,  0.00,  0.24,  0.00,  0.00,  0.97,  -0.41,  0.00],
   [0.00,  0.00,  0.00,  0.00,  0.00,  -0.15,  0.00,  0.00],
   [0.00,  0.88,  -0.55,  0.00,  0.00,  0.00,  -0.34,  0.00]]],


 [[[0.00,  0.00,  0.00,  0.65,  0.00,  0.00,  0.57,  0.00],
   [0.00,  0.40,  0.00,  0.00,  0.00,  0.52,  0.00,  0.00],
   [0.00,  0.00,  0.00,  -1.45,  -0.12,  0.00,  0.00,  0.00],
   [0.00,  1.78,  0.00,  0.00,  0.00,  0.00,  -1.03,  0.00],
   [0.00,  0.00,  -0.77,  0.00,  0.00,  -0.27,  0.00,  0.00],
   [1.56,  0.00,  0.00,  0.00,  0.00,  0.00,  0.32,  0.00],
   [-0.47,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00],
   [0.00,  0.00,  0.21,  0.00,  -0.38,  0.00,  0.15,  0.00]],

  [[1.50,  0.00,  0.00,  -1.43,  0.00,  0.00,  0.00,  0.00],
   [0.00,  0.00,  0.00,  0.00,  0.53,  0.00,  0.00,  -0.34],
   [0.00,  0.00,  0.00,  0.00,  0.00,  -0.55,  0.00,  -0.08],
   [0.00,  -0.23,  -0.70,  0.00,  0.00,  0.00,  0.00,  0.00],
   [-0.30,  0.00,  0.00,  0.00,  0.00,  1.23,  0.00,  -1.13],
   [0.00,  0.00,  -0.77,  0.00,  0.00,  0.00,  0.00,  0.00],
   [0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00],
   [0.00,  0.40,  0.77,  0.00,  0.11,  0.00,  0.00,  -1.68]]],


 [[[0.00,  0.17,  0.00,  0.00,  0.00,  1.20,  0.00,  0.61],
   [0.00,  0.00,  -0.52,  0.00,  0.00,  0.00,  0.00,  0.00],
   [0.00,  -2.02,  0.00,  -0.83,  -2.12,  0.00,  0.00,  0.00],
   [0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  -1.23],
   [0.00,  -0.22,  0.00,  0.00,  0.00,  1.37,  0.00,  -1.17],
   [0.00,  0.00,  0.00,  -0.34,  0.00,  0.00,  0.00,  0.00],
   [0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00],
   [-0.98,  0.00,  -0.11,  0.00,  0.00,  -0.81,  0.00,  -0.21]],

  [[-0.95,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  -0.05],
   [0.00,  0.00,  0.00,  -1.21,  0.00,  -0.64,  0.00,  0.00],
   [0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00],
   [0.20,  0.00,  1.51,  0.00,  0.31,  0.00,  0.50,  0.00],
   [0.00,  0.16,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00],
   [0.00,  0.00,  0.00,  1.01,  0.57,  0.00,  0.00,  -0.56],
   [0.00,  -0.28,  1.48,  0.00,  -1.30,  0.00,  0.00,  0.55],
   [0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00]]]]
 */

}
